/*
 * -------------------------------------------------
 *  nf-core/circrna Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

manifest {
  name = 'nf-core/circrna'
  author = 'Barry Digby'
  homePage = 'https://github.com/nf-core/circrna'
  description = 'circRNA quantification, differential expression analysis and miRNA target prediction in NGS data'
  mainScript = 'main.nf'
  nextflowVersion = '>=19.10.0'
  version = '1.0dev'
}

// Global default params, used in configs
params {

  // Workflow flags
  outdir ='.'
  fasta = 'reference/GRCh38.fa'
  gencode_gtf = 'reference/GRCh38.gtf'
  gene_annotation = 'reference/GRCh38.txt'
  version = 'GRCh38'
  tool = 'combine'
  fasta_fai = 'reference/GRCh38.fa.fai'
  bwa_index = '/data/bdigby/grch38/index/bwa'
  star_index = '/data/bdigby/grch38/index/star_index'
  hisat2_index = '/data/bdigby/grch38/index/hisat2'
  bowtie_index = '/data/bdigby/grch38/index/bowtie/*'
  bowtie2_index = '/data/bdigby/grch38/index/bowtie2/*'
  fasta_chr = ''
  ciriquant_yml = ''
  inputdir = '/data/bdigby/circTCGA/fastq'
  input_type = 'fastq'
  fastq_glob = '*_r{1,2}.fastq.gz'
  bam_glob = '*.bam'
  adapters = '/data/bdigby/grch38/adapters.fa'
  phenotype = '/data/bdigby/grch38/phenotype.txt'


  // Defaults only, expecting to be overwritten
  cpus = 8
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h

}

// Container Slug
process.container = 'barryd237/circrna'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}


// Load igenomes.config if required
if (!params.igenomes_ignore) {
  includeConfig 'conf/igenomes.config'
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
  R_PROFILE_USER = "/.Rprofile"
  R_ENVIRON_USER = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
